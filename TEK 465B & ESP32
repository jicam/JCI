/*  
    ---- PROGRAM 3 CALL_SIGN RUNNING on ESP32 JCI, NOV.29, 2024 ----

For those interested in programming an ESP32 using the Arduino IDE, 
here is the C++ program managing the three rotating (Ham radio) call signs (W2AEW.DL8YQ and mine ON4KCF)

Feel free to modify or replace them with others created by yourself.

The unique feature of these designs is that they consist of closed polylines, all ending with '255'.
A simple and effective method to convert a drawing (JPEG, PNG, etc.) into vectors is to use Inkscape.
However, Inkscape generates a (large) set of separate vectors, meaning each vector has its own start and end points, which doubles the file size compared to using a polyline.
AutoCAD is a very useful tool for transforming these numerous vectors into multiple polylines (using commands like PEDIT, etc.).

For each polyline, it is essential to ensure it is closed, which can be done using the CLOSE command. If the polyline is already properly closed, the command makes no changes. However, if the polyline remains open, CLOSE generates a vector to close it, thereby indicating that a "natural" closure must be applied to that polyline.

You may notice that each polyline used in call signs ends with the value 255. This serves as a signal for the C++ program that the end of a polyline has been reached.

The oscilloscope screen is represented as a matrix of XY points measuring 254x254 (with 255, of course, being excluded).
The origin (0,0) is located at the bottom-left corner of the screen.
The two 12-bit DACs of the ESP32 each deliver a maximum voltage of 3.3V.
*/ 

#include <math.h>
#include "driver/dac.h"
#define FIGURE_DELAY 1  // Delay in microseconds

// Donn√©es pour les images
const uint8_t logo1[] PROGMEM = { /* W2AEW */ 
10,94,8,199,24,202,24,148,32,189,41,192,41,147,49,199,66,202,47,98,31,94,32,133,26,98,18,96,12,94,10,94,255,
62,185,70,196,78,201,85,202,91,200,96,195,98,188,99,181,99,171,97,159,93,147,83,129,95,133,93,99,56,95,59,124,66,136,74,148,77,154,79,158,81,163,82,166,81,168,79,168,75,165,63,155,63,185,255,
112,115,120,117,118,95,133,98,138,203,109,194,96,96,110,100,255,
119,159,115,133,121,136,123,185,255,
175,203,175,201,184,202,191,204,192,176,192,157,192,151,192,149,195,170,197,184,199,190,208,193,208,171,208,156,209,151,209,149,213,175,217,200,225,202,231,203,233,203,214,99,199,95,199,134,194,98,185,96,179,95,177,95,177,99,177,111,176,145,175,195,174,172,159,169,158,157,171,163,169,140,157,137,156,132,155,128,159,128,166,131,176,134,174,100,140,93,148,195,162,201,176,206,255,
  
  };
const uint8_t logo2[] PROGMEM = { /* DL8YQ */
138,135,137,139,135,141,137,143,140,146,142,149,143,154,144,158,143,162,154,139,152,124,148,114,169,114,174,139,197,167,177,169,167,157,163,169,141,167,143,164,140,166,136,169,128,171,126,171,
118,171,113,170,108,168,102,162,99,157,98,153,98,150,99,145,102,141,97,137,95,132,93,125,94,120,96,115,100,112,107,110,115,110,123,112,130,115,135,119,137,125,139,130,255,
122,153,118,153,117,151,116,149,116,147,118,146,121,146,123,148,125,150,124,152,255,
117,135,115,135,112,132,112,130,114,128,116,128,119,129,121,132,121,134,255,
65,167,64,159,62,164,59,168,51,170,42,171,31,171,17,168,13,140,10,126,7,114,23,114,27,115,39,122,50,130,57,140,61,146,63,151,58,126,54,113,89,116,93,135,76,132,84,169,255,
33,154,31,145,29,137,34,139,40,143,44,146,46,148,47,151,46,153,42,155,38,155,33,154,255,
201,166,195,160,191,155,188,147,185,140,184,133,184,125,187,119,190,115,196,111,203,111,208,111,211,112,215,101,232,114,227,124,232,129,236,139,238,148,238,158,236,164,235,166,233,169,230,171,
227,172,219,173,212,172,206,170,200,165,255,
206,148,205,143,204,141,204,137,205,134,208,133,212,134,215,136,218,140,220,146,221,150,220,154,219,156,215,156,212,155,209,152,207,148,255,
89,203,84,203,84,201,84,199,83,195,81,187,86,188,87,193,89,194,87,187,92,188,93,196,95,204,90,203,89,197,87,197,255,
96,203,95,194,93,187,103,188,108,188,110,204,105,203,104,193,98,192,99,194,102,194,103,198,99,197,99,199,104,199,104,202,104,205,96,203,255,
111,202,111,198,110,194,109,187,113,188,114,193,114,190,115,188,120,187,122,204,118,204,117,198,116,203,111,203,255,
123,198,127,198,124,194,122,192,121,187,132,188,133,194,128,192,133,199,134,204,124,203,255,
135,190,134,188,133,186,133,184,137,183,139,192,135,192,255,

  };
const uint8_t logo3[] PROGMEM = { /* ON4KCF */ 
53,130,55,139,55,148,54,156,52,166,48,172,43,175,38,174,34,171,29,166,26,161,23,156,21,150,17,140,15,130,14,120,13,108,15,98,17,91,20,87,25,85,28,85,35,89,41,97,46,107,50,117,255,
38,147,36,146,34,143,32,140,30,135,28,128,26,121,26,114,26,108,29,104,32,103,35,104,37,107,40,111,42,119,44,128,44,135,43,142,43,145,40,147,255,
66,167,72,169,72,146,74,123,79,166,92,170,82,92,69,88,64,112,61,87,49,82,59,165,62,166,255,
118,107,119,127,116,127,121,162,109,159,105,126,98,126,109,170,95,167,85,113,88,104,102,106,101,87,112,92,113,107,255,
138,86,152,97,144,142,158,161,149,170,137,154,139,170,133,168,127,166,118,87,130,93,133,128,255,
176,95,180,100,178,113,175,107,171,105,169,105,165,108,163,114,164,122,166,130,169,140,173,146,176,148,179,147,181,145,188,157,184,122,181,98,180,91,180,88,186,90,193,92,195,122,209,126,211,141,198,137,200,149,214,152,214,173,189,167,188,162,186,166,184,169,180,171,177,171,173,171,170,169,166,165,163,160,159,152,156,145,154,136,152,126,152,117,152,107,154,100,157,93,161,89,163,88,168,88,172,90,255,
  
  };
const uint8_t logo4[] PROGMEM = { /* TEK LOGO RONDF */ 
108,24,114,23,120,22,125,21,130,21,136,22,141,22,148,23,154,25,160,26,165,28,172,32,177,35,182,38,187,42,191,46,195,50,199,55,202,59,206,64,208,69,211,75,213,80,215,85,216,91,217,97,217,102,218,108,217,114,217,117,217,119,214,119,212,118,210,119,209,121,208,119,207,117,204,115,202,115,200,116,198,117,198,114,196,116,194,117,196,115,198,113,198,105,197,94,196,83,195,74,194,67,193,63,
193,61,192,59,191,56,188,53,185,52,182,52,180,52,178,53,177,55,175,57,174,61,172,64,171,68,170,73,170,79,169,85,169,92,168,102,166,102,163,101,160,99,158,99,156,100,154,102,152,104,150,103,150,
100,150,98,147,99,146,101,144,103,144,105,144,114,144,120,142,122,146,120,148,118,143,123,143,125,143,130,143,135,143,142,143,145,142,147,140,149,137,148,132,147,127,145,125,144,125,137,124,120,124,100,125,96,128,96,130,97,133,94,135,92,136,90,133,89,130,88,128,88,128,86,128,82,129,74,130,66,131,61,132,58,134,55,137,53,139,53,141,53,142,55,143,57,144,60,145,67,147,76,148,87,148,92,148,94,
146,94,144,94,142,96,140,97,138,98,138,95,138,93,134,95,131,97,131,107,131,114,131,117,134,115,136,114,135,116,133,118,135,119,137,118,138,116,138,110,138,102,141,101,143,102,146,98,149,96,150,
92,150,86,148,73,147,67,146,62,145,57,144,54,143,52,141,51,139,50,137,50,134,52,131,55,130,58,129,61,129,64,128,69,127,77,126,86,126,91,124,93,124,107,124,116,123,123,123,128,123,130,121,130,
119,130,117,132,114,134,116,136,119,137,121,135,123,134,121,136,120,139,119,141,116,141,110,140,104,137,101,136,100,133,100,131,103,131,105,132,106,130,107,128,107,124,107,110,107,94,107,88,109,88,111,89,113,87,117,84,118,82,115,81,113,79,110,83,106,86,106,90,106,109,106,123,105,125,103,126,102,124,102,117,102,103,102,89,102,80,102,75,97,80,94,82,94,89,94,93,94,95,93,98,91,100,94,98,
98,94,100,94,100,97,98,96,95,98,91,102,91,104,93,108,93,111,94,116,94,122,93,129,93,132,90,132,88,131,87,126,87,121,87,116,86,112,86,109,85,106,83,104,81,103,79,104,79,111,79,117,79,122,79,125,
78,127,74,125,73,106,73,81,74,73,74,70,76,71,79,72,83,69,87,65,85,64,85,61,86,57,87,55,89,53,91,52,93,53,95,56,97,59,98,62,99,66,99,70,99,72,97,71,95,71,92,74,90,76,88,74,88,71,88,68,86,68,84,
70,81,72,80,74,79,78,79,85,79,92,80,94,82,95,84,95,87,93,88,91,88,88,89,84,89,80,89,78,92,80,94,81,98,77,102,74,101,71,101,66,99,61,97,56,96,54,95,52,93,51,91,50,89,50,87,52,86,54,84,57,84,59,
83,61,81,
61,79,62,77,64,76,61,76,58,72,62,67,65,67,68,67,70,65,70,62,68,59,66,57,65,57,68,57,73,57,78,57,80,61,78,63,77,64,75,64,73,64,71,66,72,68,72,71,70,73,71,73,75,73,79,72,81,68,79,65,77,62,79,58,
81,58,83,63,86,66,88,69,85,71,84,69,87,66,89,66,91,66,94,64,94,61,92,57,90,56,94,56,100,56,108,60,106,62,104,63,102,64,96,66,95,69,94,71,92,72,94,72,101,72,107,72,109,70,108,68,107,65,105,63,
105,
60,107,58,108,58,110,61,112,66,114,68,112,71,110,71,112,68,114,66,115,66,118,66,120,63,119,59,117,55,115,51,113,50,92,50,62,50,56,51,54,58,59,64,63,66,64,69,63,74,59,75,57,71,54,67,51,66,49,69,
46,73,42,79,37,83,35,87,32,92,30,97,28,102,26,255,
121,197,129,197,134,197,140,196,145,196,150,195,155,193,160,191,165,189,170,187,177,183,184,179,189,174,195,169,197,166,199,166,205,168,211,169,213,168,215,166,216,164,218,162,219,164,220,167,
222,172,225,173,228,174,230,172,232,169,231,165,229,158,225,146,226,143,229,136,232,129,233,126,231,128,229,132,225,139,222,145,221,148,222,153,224,161,227,169,227,171,225,172,223,171,221,168,
219,163,218,158,216,158,214,162,211,168,209,168,207,167,206,165,207,163,209,158,212,153,213,150,214,148,213,144,211,136,208,128,207,124,210,124,212,125,214,123,216,121,215,123,214,125,214,128,
215,133,217,138,218,140,221,135,223,131,224,129,226,129,228,130,230,128,232,125,230,124,228,124,225,126,224,129,222,131,220,131,219,128,218,123,218,118,219,112,219,106,219,100,218,95,217,90,216,85,215,80,213,75,211,71,209,66,206,62,204,59,201,54,204,51,211,43,222,32,221,30,221,26,219,24,219,22,220,20,218,20,217,18,218,16,216,16,214,16,214,14,215,12,213,12,211,13,210,11,208,10,206,8,
204,9,202,7,200,8,198,8,195,8,184,20,174,31,168,28,163,26,158,24,152,22,147,21,143,21,140,20,130,20,121,20,118,21,115,21,108,23,101,24,95,27,89,29,84,33,78,36,73,40,67,45,63,49,62,47,59,46,55,
48,
50,52,50,55,49,61,49,67,49,70,49,72,48,74,47,76,46,69,46,44,46,35,42,37,38,40,37,42,37,52,37,70,37,87,37,94,39,93,41,92,45,89,46,86,46,83,47,80,48,77,49,83,49,89,49,91,47,91,45,91,41,93,39,95,
37,96,41,99,44,101,46,100,48,98,46,101,44,103,44,105,44,107,41,106,36,103,31,99,26,96,24,94,24,90,24,87,24,85,26,86,28,88,31,91,32,63,32,44,32,35,34,37,36,38,38,38,42,36,45,34,45,32,43,30,41,27,37,29,32,32,31,36,31,56,30,79,27,81,24,84,24,89,24,95,28,98,36,104,40,107,41,113,41,118,42,123,42,127,43,129,40,130,37,132,30,137,25,140,22,143,20,145,18,147,17,150,17,152,17,156,17,160,17,163,
18,166,19,169,20,172,21,175,22,178,24,181,28,187,32,191,36,196,41,200,46,204,51,207,57,210,63,213,67,214,70,215,73,215,77,215,81,215,83,214,85,213,86,211,89,208,91,204,94,198,98,192,100,192,103,193,106,194,114,196,255,
75,177,72,174,68,171,65,168,64,166,67,166,69,166,71,164,73,161,75,157,75,155,76,151,77,141,78,128,80,127,82,126,84,124,86,124,86,128,86,131,89,133,93,134,96,132,98,131,99,133,99,135,100,137,102,142,104,154,105,158,105,162,106,164,107,166,109,167,111,168,114,168,116,167,118,163,120,161,121,157,122,153,122,148,123,145,126,146,128,147,134,148,136,149,138,149,140,149,143,148,145,146,147,
145,149,144,149,148,150,154,150,159,151,162,152,165,153,167,155,169,157,170,160,170,163,169,164,167,166,163,167,161,168,158,169,156,170,154,172,153,173,156,174,159,177,160,180,161,183,158,185,
155,187,153,187,156,188,161,188,163,191,164,193,164,195,163,197,162,196,165,193,168,190,172,186,175,181,179,176,182,171,185,166,187,160,190,155,192,149,193,143,194,137,195,130,195,123,195,117,
195,112,194,106,193,101,191,95,189,90,186,85,184,80,180,255,
47,155,49,153,51,152,51,155,46,160,41,166,37,171,34,175,33,177,35,181,38,185,41,188,45,192,49,196,53,199,57,202,60,205,64,207,67,209,69,207,72,203,76,199,81,193,85,187,85,189,84,192,81,197,77,
202,74,206,71,210,73,211,75,211,78,211,80,211,82,211,84,209,87,206,90,201,94,194,96,191,95,194,93,199,90,205,87,208,86,210,84,212,80,214,77,214,73,214,70,214,66,212,61,210,56,208,52,206,48,203,
45,201,41,198,38,195,35,192,32,189,29,186,27,183,25,179,23,176,21,173,20,171,19,168,18,165,18,162,18,158,18,154,18,151,19,148,20,146,23,143,27,139,32,136,38,133,42,131,37,135,28,140,26,142,24,
144,23,146,21,149,21,151,22,154,23,157,24,161,26,165,27,169,29,170,31,169,34,166,37,162,42,158,255,
23,167,21,164,20,160,19,156,19,151,19,155,19,157,19,159,20,164,22,169,24,173,26,177,28,181,32,185,35,190,38,193,42,196,46,200,50,203,54,205,59,208,63,210,66,211,69,212,67,211,63,209,58,207,54,
204,50,201,46,198,42,194,38,190,35,187,32,182,29,178,26,175,24,171,255,
175,113,177,114,179,115,182,112,184,110,182,108,180,107,178,108,176,109,176,107,174,108,172,109,168,112,169,133,169,151,168,154,167,156,165,156,163,155,159,154,154,153,152,152,151,150,151,147,
150,137,150,124,150,112,151,109,151,107,153,106,155,107,158,108,162,109,166,110,168,111,171,108,173,106,173,104,171,103,171,100,171,94,171,86,172,79,172,74,173,70,174,66,175,62,177,59,178,57,
180,55,182,54,184,54,187,55,189,57,190,59,191,61,191,63,193,70,194,78,195,89,195,100,196,109,196,112,194,112,192,112,189,115,187,117,186,113,186,109,183,112,180,115,180,125,180,133,180,135,181,
133,185,124,188,118,190,118,193,119,193,141,193,163,190,163,188,160,188,150,188,141,188,138,186,143,182,153,181,156,180,158,178,160,174,158,174,136,174,114,255,
57,149,58,155,59,157,60,159,60,161,58,159,56,155,53,150,50,145,48,141,47,137,46,132,45,128,44,124,43,120,43,115,42,112,43,110,46,108,48,107,49,110,49,113,52,114,54,116,55,119,55,131,56,140,255,
66,164,63,162,62,160,61,158,60,154,59,150,58,147,58,142,57,131,57,122,57,119,59,118,62,120,66,122,69,120,72,119,72,122,72,125,74,126,76,127,76,129,75,132,75,141,74,148,74,153,73,157,72,159,71,
161,69,163,67,164,255,
116,164,114,166,112,166,109,165,108,163,107,161,106,159,106,156,104,148,104,141,104,139,111,141,116,143,119,143,121,144,120,150,119,157,117,161,117,163,255,
118,130,119,106,119,90,119,84,116,87,113,90,113,112,113,134,115,132,255,
131,132,132,137,132,139,134,137,136,136,134,139,132,140,134,141,136,141,138,139,138,134,138,130,137,127,135,125,133,125,131,124,255,
162,115,160,114,157,112,156,114,156,118,156,130,156,141,156,146,157,148,159,149,161,149,162,147,162,145,162,133,162,121,162,116,255,
161,167,158,167,156,166,154,165,153,162,152,159,152,155,152,153,158,155,165,157,166,159,165,161,164,163,163,166,255,
203,122,203,126,203,144,204,166,202,166,200,165,199,163,198,160,198,143,198,128,198,121,255,
176,31,178,28,184,22,192,14,190,17,184,23,178,29,255,
195,10,197,9,197,11,198,13,199,15,199,17,201,18,201,20,203,20,205,20,204,23,206,24,204,23,205,21,207,19,208,21,207,23,208,26,210,27,209,25,211,24,213,24,213,22,214,20,216,17,216,19,216,21,214,
24,213,26,212,28,214,28,216,27,218,24,217,26,216,28,217,30,219,28,220,30,220,32,218,33,216,33,213,31,209,30,206,28,202,24,199,20,197,17,196,14,195,12,255,
190,42,189,40,192,38,195,34,203,27,205,29,207,30,210,31,212,33,212,35,214,34,214,36,215,34,214,37,209,42,201,50,208,43,214,37,216,35,215,37,209,43,203,49,200,52,200,50,202,47,206,43,202,47,200,
50,198,50,196,49,194,46,191,43,255,
198,21,199,23,198,26,193,31,188,37,186,38,183,37,185,34,190,28,195,23,197,21,255,
209,15,210,13,212,14,214,16,214,18,212,18,210,17,255,
212,19,212,22,210,23,210,20,212,19,255,
205,18,203,20,203,17,205,16,255,
202,9,201,11,199,13,199,10,201,9,255,
201,17,200,15,202,14,202,16,255,
209,12,255,
204,12,204,10,206,10,205,12,255,
220,26,218,26,217,28,219,28,255,
216,25,215,27,213,28,213,26,215,25,216,23,218,21,218,23,216,24,255,
  };

// Variables pour l'√©chelle des X
byte x_min;
byte x_max;
byte x_mid;
byte x_half;

// Initialisation des canaux DAC
dac_channel_t dacChannelX = DAC_CHANNEL_1; // GPIO25
dac_channel_t dacChannelY = DAC_CHANNEL_2; // GPIO26

// Fonction pour dessiner une ligne avec l'algorithme de Bresenham
void drawLine(byte x0, byte y0, byte x1, byte y1) {
    int dx = abs(x1 - x0);
    int dy = abs(y1 - y0);
    int sx = (x0 < x1) ? 1 : -1;
    int sy = (y0 < y1) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        // Envoyer le point (x0, y0) via les DACs
        dac_output_voltage(dacChannelX, x0);  // Envoie la valeur X √† DAC1 (GPIO25)
        dac_output_voltage(dacChannelY, y0);  // Envoie la valeur Y √† DAC2 (GPIO26)
        delayMicroseconds(FIGURE_DELAY);

        // V√©rifier si on est arriv√© au point final
        if (x0 == x1 && y0 == y1) break;

        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x0 += sx;
        }

        if (e2 < dx) {
            err += dx;
            y0 += sy;
        }
    }
}

// Fonction pour pr√©parer le buffer avec un '255' suppl√©mentaire apr√®s chaque polyline
void prepareBufferWithExtra255(const uint8_t* input, int input_size, uint8_t* output, int &output_size) {
    int j = 0;
    for (int i = 0; i < input_size; i++) {
        output[j++] = input[i];
        if (input[i] == 255) {
            output[j++] = 255;
        }
    }
    output_size = j;  // Taille r√©elle du buffer de sortie
}

// Fonction pour calculer x_min et x_max en fonction des donn√©es d'une image
void calculateMinMax(const uint8_t* image, int image_size) {
    x_min = 255;
    x_max = 0;
    for (int i = 0; i < image_size; i += 2) {
        if (image[i] == 255) continue;  // Ignorer le s√©parateur
        x_min = min(x_min, image[i]);
        x_max = max(x_max, image[i]);
    }
    x_mid = (x_max + x_min) / 2;
    x_half = (x_max - x_min) / 2;
}

// Fonction pour dessiner une image avec rotation
void drawRotatingImage(const uint8_t* image, int image_size, int rotations) {
    // Taille maximale du buffer (double la taille du tableau d'origine)
    uint8_t buffer[image_size * 2]; // Le buffer est ajust√© √† la taille de l'image fournie
    int buffer_size = 0;

    // Pr√©parer le tampon avec un '255' suppl√©mentaire apr√®s chaque polyline
    prepareBufferWithExtra255(image, image_size, buffer, buffer_size);

    byte sx = x_half;

    // R√©initialisation des variables pour chaque logo
    int prev_x = -1, prev_y = -1;
    int first_x = -1, first_y = -1;
    bool first_point = true;

    // Rotation et dessin
    for (int p = 0; p < rotations; p++) {
        sx = (sin(p / 100.0) * x_half);  // Transformation sinuso√Ødale sur l'axe X

        for (int i = 0; i < buffer_size; i += 2) {
            byte x = buffer[i];
            byte y = buffer[i + 1];

            if (x == 255) {
                // Fin de polyline : relier le dernier point au premier
                if (prev_x != -1 && prev_y != -1 && first_x != -1 && first_y != -1) {
                    drawLine(prev_x, prev_y, first_x, first_y);
                }

                // R√©initialiser les points
                prev_x = -1;
                prev_y = -1;
                first_point = true;
                first_x = -1;
                first_y = -1;
                continue;
            }

            // Mise √† l'√©chelle des points
            byte scaled_x = map(x, x_min, x_max, x_mid - sx, x_mid + sx);
            byte scaled_y = map(y, 0, 255, 0, 255);

            if (first_point) {
                prev_x = scaled_x;
                prev_y = scaled_y;
                first_x = scaled_x;
                first_y = scaled_y;
                first_point = false;
            } else {
                drawLine(prev_x, prev_y, scaled_x, scaled_y);
                prev_x = scaled_x;
                prev_y = scaled_y;
            }
        }
    }
}

void setup() {
    // Activer les DACs
    dac_output_enable(dacChannelX);
    dac_output_enable(dacChannelY);
}

void loop() {
    int nbre_de_rotations = 2; // Nombre de rotations par image
    const int rotations_per_image = 314; // Correspond √† environ 360¬∞

    // Tableau contenant les trois images avec leurs tailles respectives
    const uint8_t* images[] = {logo1, logo2, logo3, logo4};
    int image_sizes[] = {sizeof(logo1), sizeof(logo2), sizeof(logo3),sizeof(logo4) };
    int n_images = sizeof(images) / sizeof(images[0]);

    // Boucle pour afficher chaque image avec le nombre de rotations sp√©cifi√©
    for (int img = 0; img < n_images; img++) {
        calculateMinMax(images[img], image_sizes[img]);  // Recalcule x_min, x_max, x_mid, et x_half
        for (int rotation = 0; rotation < nbre_de_rotations; rotation++) {
            drawRotatingImage(images[img], image_sizes[img], rotations_per_image);
        }
    }
}
